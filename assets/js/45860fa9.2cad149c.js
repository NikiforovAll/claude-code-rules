"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[440],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},9897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tips-and-tricks/extended-plan-mode","title":"Use Extended Plan Mode","description":"A structured multi-stage approach for implementing features with Claude Code:","source":"@site/docs/tips-and-tricks/extended-plan-mode.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/extended-plan-mode","permalink":"/claude-code-handbook/tips-and-tricks/extended-plan-mode","draft":false,"unlisted":false,"editUrl":"https://github.com/nikiforovall/claude-code-rules/edit/main/website/docs/tips-and-tricks/extended-plan-mode.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Use Extended Plan Mode","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Create Custom Slash Commands","permalink":"/claude-code-handbook/tips-and-tricks/custom-slash-commands"},"next":{"title":"Use git worktree","permalink":"/claude-code-handbook/tips-and-tricks/git-worktree"}}');var s=t(4848),i=t(8453);const a={title:"Use Extended Plan Mode",sidebar_position:3},o="Use Extended Plan Mode",d={},l=[];function c(e){const n={h1:"h1",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"use-extended-plan-mode",children:"Use Extended Plan Mode"})}),"\n",(0,s.jsx)(n.p,{children:"A structured multi-stage approach for implementing features with Claude Code:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stage 1: Context Priming"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide Claude with proper context about the codebase"}),"\n",(0,s.jsx)(n.li,{children:"Share requirements and implementation details"}),"\n",(0,s.jsx)(n.li,{children:"Help Claude understand existing patterns and architecture"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stage 2: Planning"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use Claude Code's ",(0,s.jsx)(n.strong,{children:"Plan Mode"})," to create an implementation plan"]}),"\n",(0,s.jsx)(n.li,{children:"Review the plan thoroughly before proceeding"}),"\n",(0,s.jsx)(n.li,{children:"Ensure all edge cases and requirements are covered"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stage 3: Implementation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Let Claude Code follow the plan autonomously"}),"\n",(0,s.jsx)(n.li,{children:"Monitor progress and inspect changes as they happen"}),"\n",(0,s.jsx)(n.li,{children:"Provide additional context or course-correct if needed"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stage 4: Evaluation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enable Claude Code to evaluate the task outcome"}),"\n",(0,s.jsx)(n.li,{children:"Use unit tests and integration tests for validation"}),"\n",(0,s.jsx)(n.li,{children:"For frontend changes, use Playwright or similar tools to verify visual results"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"When to use:"})," Complex feature development requiring multiple steps and verification. Ideal for production code where quality and correctness are critical."]}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udca1 Act as a supervisor during implementation - stay engaged but let Claude work through the plan independently."}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udca1 The evaluation stage is crucial - having automated tests or visual verification tools ready before starting saves time and ensures quality."}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TD\n    subgraph Developer\n        D1[Provide context:<br/>codebase, requirements,<br/>patterns]\n        D2[Review plan<br/>thoroughly]\n        D3[Monitor progress<br/>and inspect changes]\n        D4{Course<br/>correction<br/>needed?}\n        D5[Provide additional<br/>context/guidance]\n        D6[Review results &<br/>approve feature]\n    end\n\n    subgraph Claude_Code[Claude Code]\n        C1[Understand context<br/>and requirements]\n        C2[Create implementation<br/>plan using Plan Mode]\n        C3{Plan<br/>approved?}\n        C4[Implement feature<br/>autonomously]\n        C5[Run evaluation:<br/>Unit tests<br/>Integration tests<br/>E2E tests]\n        C6{Tests<br/>pass?}\n        C7[Analyze failures<br/>and suggest fixes]\n    end\n\n    Start([Start]) --\x3e D1\n    D1 --\x3e |Context| C1\n    C1 --\x3e C2\n    C2 --\x3e D2\n    D2 --\x3e C3\n    C3 --\x3e |No| C2\n    C3 --\x3e |Yes| C4\n    C4 --\x3e D3\n    D3 --\x3e D4\n    D4 --\x3e |Yes| D5\n    D5 --\x3e |Additional context| C4\n    D4 --\x3e |No| C5\n    C5 --\x3e C6\n    C6 --\x3e |No| C7\n    C7 --\x3e |Fix| C4\n    C6 --\x3e |Yes| D6\n    D6 --\x3e End([Complete])\n\n    style Developer fill:#e1f5ff\n    style Claude_Code fill:#ffe1e1"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);