"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[557],{3774:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tips-and-tricks/ccstatusline","title":"Use ccstatusline","description":"ccstatusline - Customize your Claude Code status line with useful information.","source":"@site/docs/tips-and-tricks/ccstatusline.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/ccstatusline","permalink":"/claude-code-handbook/tips-and-tricks/ccstatusline","draft":false,"unlisted":false,"editUrl":"https://github.com/nikiforovall/claude-code-rules/edit/main/website/docs/tips-and-tricks/ccstatusline.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"title":"Use ccstatusline","sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"Use TaskMaster","permalink":"/claude-code-handbook/tips-and-tricks/taskmaster"},"next":{"title":"Use ccusage","permalink":"/claude-code-handbook/tips-and-tricks/ccusage"}}');var n=s(4848),a=s(8453);const r={title:"Use ccstatusline",sidebar_position:17},o="Use ccstatusline",l={},c=[{value:"\u2728 Features",id:"-features",level:2}];function u(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"use-ccstatusline",children:"Use ccstatusline"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/sirmalloc/ccstatusline",children:"ccstatusline"})," - Customize your Claude Code status line with useful information."]}),"\n",(0,n.jsx)(t.h2,{id:"-features",children:"\u2728 Features"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\ud83d\udcca Real-time Metrics - Display model name, git branch, token usage, session duration, block timer, and more"}),"\n",(0,n.jsx)(t.li,{children:"\ud83c\udfa8 Fully Customizable - Choose what to display and customize colors for each element"}),"\n",(0,n.jsx)(t.li,{children:"\u26a1 Powerline Support - Beautiful Powerline-style rendering with arrow separators, caps, and custom fonts"}),"\n",(0,n.jsx)(t.li,{children:"\ud83d\udcd0 Multi-line Support - Configure multiple independent status lines"}),"\n",(0,n.jsx)(t.li,{children:"\ud83d\udda5\ufe0f Interactive TUI - Built-in configuration interface using React/Ink"}),"\n",(0,n.jsx)(t.li,{children:"\u2699\ufe0f Global Options - Apply consistent formatting across all widgets (padding, separators, bold, background)"}),"\n",(0,n.jsx)(t.li,{children:"\ud83d\ude80 Cross-platform - Works seamlessly with both Bun and Node.js"}),"\n",(0,n.jsx)(t.li,{children:"\ud83d\udccf Smart Width Detection - Automatically adapts to terminal width with flex separators"}),"\n",(0,n.jsx)(t.li,{children:"\u26a1 Zero Config - Sensible defaults that work out of the box"}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var i=s(6540);const n={},a=i.createContext(n);function r(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);