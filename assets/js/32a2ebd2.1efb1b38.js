"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9358],{6026:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"tips-and-tricks/commit-frequently","title":"Commit Frequently","description":"Git Commits are free \ud83d\ude05 so please commit often and use meaningful commit messages. This will help you keep track of changes and make it easier to revert back if needed.","source":"@site/docs/tips-and-tricks/commit-frequently.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/commit-frequently","permalink":"/claude-code-handbook/tips-and-tricks/commit-frequently","draft":false,"unlisted":false,"editUrl":"https://github.com/nikiforovall/claude-code-rules/edit/main/website/docs/tips-and-tricks/commit-frequently.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Commit Frequently","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Use git worktree","permalink":"/claude-code-handbook/tips-and-tricks/git-worktree"},"next":{"title":"Create Custom Subagents","permalink":"/claude-code-handbook/tips-and-tricks/subagents"}}');var o=n(4848),s=n(8453);const r={title:"Commit Frequently",sidebar_position:4},a="Commit frequently",c={},m=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"commit-frequently",children:"Commit frequently"})}),"\n",(0,o.jsx)(t.p,{children:"Git Commits are free \ud83d\ude05 so please commit often and use meaningful commit messages. This will help you keep track of changes and make it easier to revert back if needed."}),"\n",(0,o.jsxs)(t.p,{children:["You can use the ",(0,o.jsx)(t.code,{children:"/commit"})," command to automate commit creation. This command will do a commit for you."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-markdown",children:'---\nallowed-tools: Bash(git add:*), Bash(git status:*), Bash(git commit:*)\nargument-hint: "[--no-verify]"\ndescription: Create a git commit\n---\n\n# Commit\n\nCreate well-formatted commits with conventional commit messages and emojis.\n\n## Features:\n- Runs pre-commit checks by default (lint, build, generate docs)\n- Automatically stages files if none are staged\n- Uses conventional commit format with descriptive emojis\n- Suggests splitting commits for different concerns\n\n## Usage:\n- `/commit` - Standard commit with pre-commit checks\n- `/commit --no-verify` - Skip pre-commit checks if $ARGUMENTS contains `--no-verify` flag\n\n## Commit Types:\n- \u2728 feat: New features\n- \ud83d\udc1b fix: Bug fixes\n- \ud83d\udcdd docs: Documentation changes\n- \u267b\ufe0f refactor: Code restructuring without changing functionality\n- \ud83c\udfa8 style: Code formatting, missing semicolons, etc.\n- \u26a1\ufe0f perf: Performance improvements\n- \u2705 test: Adding or correcting tests\n- \ud83e\uddd1\u200d\ud83d\udcbb chore: Tooling, configuration, maintenance\n- \ud83d\udea7 wip: Work in progress\n- \ud83d\udd25 remove: Removing code or files\n- \ud83d\ude91 hotfix: Critical fixes\n- \ud83d\udd12 security: Security improvements\n\n## Process:\n1. Check for staged changes (!`git status`)\n2. If no staged changes, review and stage appropriate files\n3. Run pre-commit checks (unless --no-verify)\n4. Analyze changes to determine commit type\n5. Generate descriptive commit message\n6. Include scope if applicable: `type(scope): description`\n7. Add body for complex changes explaining why\n8. NOTE: Exclude Claude co-authorship footer from commits\n9. Execute commit\n\n## Best Practices:\n- Keep commits atomic and focused\n- Write in imperative mood ("Add feature" not "Added feature")\n- Explain why, not just what\n- Reference issues/PRs when relevant\n- Split unrelated changes into separate commits\n'})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);